{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\singh\\\\Dropbox\\\\CODING\\\\EcommerceChatbot\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const checkAuth = async () => {\n      try {\n        const response = await fetch('/api/check-auth');\n        if (response.ok) {\n          const data = await response.json();\n          setUser(data.user);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n      setUser(data.user);\n      setIsAuthenticated(true);\n      return data;\n    } catch (error) {\n      throw new Error(error.message || 'Login failed');\n    }\n  };\n  const register = async (username, password, email) => {\n    try {\n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          email\n        }),\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n      setUser(data.user);\n      setIsAuthenticated(true);\n      return data;\n    } catch (error) {\n      throw new Error(error.message || 'Registration failed');\n    }\n  };\n  const logout = async () => {\n    try {\n      await fetch('/api/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout failed:', error);\n      throw new Error('Logout failed');\n    }\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkAuth","response","fetch","ok","data","json","error","console","login","username","password","method","headers","body","JSON","stringify","credentials","message","register","email","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/singh/Dropbox/CODING/EcommerceChatbot/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in\r\n    const checkAuth = async () => {\r\n      try {\r\n        const response = await fetch('/api/check-auth');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setUser(data.user);\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth check failed:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      const response = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n        credentials: 'include',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Login failed');\r\n      }\r\n\r\n      setUser(data.user);\r\n      setIsAuthenticated(true);\r\n      return data;\r\n    } catch (error) {\r\n      throw new Error(error.message || 'Login failed');\r\n    }\r\n  };\r\n\r\n  const register = async (username, password, email) => {\r\n    try {\r\n      const response = await fetch('/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password, email }),\r\n        credentials: 'include',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Registration failed');\r\n      }\r\n\r\n      setUser(data.user);\r\n      setIsAuthenticated(true);\r\n      return data;\r\n    } catch (error) {\r\n      throw new Error(error.message || 'Registration failed');\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await fetch('/api/logout', {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n      });\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n      throw new Error('Logout failed');\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}